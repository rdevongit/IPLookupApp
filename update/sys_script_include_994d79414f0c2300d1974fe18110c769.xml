<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_37610_iplookup.FunUtil</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>FunUtil</name>
        <script><![CDATA[/**
 * JavaScript utility functions.
 *
 * Tom Dilatush tom.dilatush@service-now.com
 */
var FunUtil = Class.create();


/**
 * get Token
 */
FunUtil.getToken = function(profileId, user){
	var gr = new GlideRecord('oauth_credential');
	
	gr.addQuery('oauth_requestor_profile.oauth_entity_profile', profileId );
	gr.addQuery('user', user );
	gr.query();
	
	if(gr.next())
		return gr.getValue('token');
	else
		return ;
};


/**
 * Live feed auto follow, add in live group
 */




FunUtil.addInLiveGroupProfile =function(record, assigned_to_sys_id) {
	gs.info('Auto follow on assigned to: addInLiveGroupProfile 1');
	var gp = new GlideRecord('live_group_profile');
	gp.addQuery('document', record.sys_id);
	gp.addQuery('table', record.getTableName());
	gp.query();
	
	if (gp.next()) {
		gs.info('Auto follow on assigned to: addInLiveGroupProfile 2');
		gs.info('Auto follow on assigned to: Profile record == ' + gp.short_description);
		FunUtil.addMember(gp.sys_id, assigned_to_sys_id);
	}
	else {
		gs.info('Auto follow on assigned to: addInLiveGroupProfile 3');
		gp.initialize();
		gp.setWorkflow(false);
		gp.name = record.number;
		gp.short_description = record.short_description;
		gp.document = record.sys_id;
		gp.document_group = "true";
		gp.table = record.getTableName();
		gp.visible_group = "false";
		gp.public_group = "false";
		var gpid = gp.insert();
		FunUtil.addMember(gpid, assigned_to_sys_id);
	}
	gs.info('Auto follow on assigned to: addInLiveGroupProfile 4');
};

/**
 * Live feed auto follow, add Member
 */
FunUtil.addMember = function(id, user) {
	//first need to check if assigned to user has live feed profile
	var lpUser = FunUtil.checkLiveFeedProfile(user);
	//now to check to see if user is in group already, if not, add
	var gr = new GlideRecord('live_group_member');
	gr.addQuery('group.sys_id', id);
	gr.addQuery('member.sys_id', lpUser);
	gr.query();
	if (gr.next() && (gr.state == 'active' || gr.state == 'admin')) { //need to make sure user wasn't already following.
		gs.info('Auto follow on assigned to: user =' + gr.member.name + ' already a member as ' + gr.state);
	} else {
		//this will handle if user was in group already but inactive(meaining they unfollow record) and will just create member if not in group already
		gs.info('Auto follow on assigned to: User = ' + user.name + ' was added/reactivated to live group');
		gr.state = 'active';
		gr.group = id;
		gr.member = lpUser;
		gr.update();
	}
};

/**
 * Live feed auto follow, check live feed
 */

FunUtil.checkLiveFeedProfile = function(user) {
	var lp = new GlideRecord('live_profile');
	lp.addQuery('document', user);
	lp.query();
	if (lp.next()) {
		//user already has live profile
		gs.info('Auto follow on assigned to: User ' + lp.name + ' had an live feed account');
		return lp.sys_id;
	}
	else {
		//create one
		gs.info('Auto follow on assigned to: user ' + user.name + ' did not have live feed profile account. creating now...');
		lp.table = 'sys_user';
		lp.document = user.sys_id;
		lp.type = 'user';
		lp.name = user.name;
		return lp.update();
	}
};


/*
This function can be utilized to return fieldValue from table or to check if record is present in table or not
tableName = tableName where data needs to be checked
columnName = columnName for which data needs to be checked
columnValue = what value in columnName to be checked
returnTrueFalse = pass true
if needs return true or false for value to be present on table
	pass false
if particular field value needs to be returned from table
	returnField = field/column name for which value needs to be returned from table

 */
FunUtil.getTableRecord = function(tableName, columName, columnValue, returnTrueFalse,returnField) {
	var val='';
	var trueOrFalse=false;
	
	var gr= new GlideRecord(tableName);
	gr.addQuery(columName,columnValue);
	gr.query();
	if(gr.next()){
		trueOrFalse=true;
	}
	
	if(JSUtil.notNil(returnField))
		val=gr.getValue(returnField);
	
	if(returnTrueFalse)
		return trueOrFalse;
	
	
	
	return val;
	
	
};


FunUtil.getTableRecordv2 =function(tableName, strQuery, returnTrueFalse,returnField){
	var val='';
	var trueOrFalse=false;
	
	var gr= new GlideRecord(tableName);
	gr.addEncodedQuery(strQuery);
	gr.query();
	if(gr.next()){
		trueOrFalse=true;
	}
	
	if(JSUtil.notNil(returnField))
		val=gr.getValue(returnField);
	
	if(returnTrueFalse)
		return trueOrFalse;
	
	
	
	return val;
	
}


FunUtil.setOutputVariable = function(numberOrSysid){
	
	var gr = new GlideRecord('sc_req_item');
	gr.get(numberOrSysid); // Pass unique identifier either sys_id or number of record
	gr.query();
	if(gr.next()){
		
		var cart1= new Cart1();
		
		var product_code=gr.cat_item;
		var jr=new GlideRecord('u_ll_input_output_alignment');
		jr.addQuery('u_cat_item',product_code);
		jr.query();
		while(jr.next()){
			var input_attr=jr.u_input_variable;
			var output_attr=jr.u_output_variable;
			var ritm_vars = gr.variables;
			
			//ritm_vars[output_attr]=ritm_vars[input_attr];
			
			if(JSUtil.notNil(ritm_vars[input_attr]))
				cart1.updateRitmVariable(gr.sys_id, output_attr,ritm_vars[input_attr]);
			
		}
		
	}
	
	
};

/** Return parent product code when passing parent_service
 ** or get associated RITM product code by passing service
 **  it will query cmdb_ci table for that service

 **/
FunUtil.getProductCode = function(service){
	
	var product_code;
	
	var gr = new GlideRecord('cmdb_ci');
	gr.addQuery('name',service);
	gr.query();
	
	if(gr.next()){
		product_code = gr.u_requested_item_id.cat_item.name;
		
	}
	
	return product_code ;
	
};


/** 1. Populate parent level fields in RITM by passing parent service
 **  2. get parent RITM number, parent product code from point 1
 **  3. pass current RITM number, parent RITM number, parent product code
 **  4. it will query LL_Input_output_aligment table for parent product
 **  5. loop through all fields to set current[ritm_vars] = parent[ritm_vars]
 **  6.  in point 5 ritm_vars are same in at both level.
 **/
FunUtil.populateParentLevelFields= function (currentRITMnumber, parentService){
	
	var parent_product_code, parentRITMnumber;
	
	var gr = new GlideRecord('cmdb_ci');
	gr.addQuery('name',parentService);
	gr.query();
	
	if(gr.next()){
		parent_product_code = gr.u_requested_item_id.cat_item.name;
		parentRITMnumber = gr.u_requested_item_id.number;
		
	}
	
	if(JSUtil.notNil(parent_product_code) && JSUtil.notNil(parentRITMnumber) && JSUtil.notNil(currentRITMnumber)){
		
		var cart1= new Cart1();
		
		var parent_gr = new GlideRecord('sc_req_item');
		parent_gr.addQuery('number',parentRITMnumber);
		parent_gr.query();
		parent_gr.next();
		
		var current_gr = new GlideRecord('sc_req_item');
		current_gr.addQuery('number',currentRITMnumber);
		current_gr.query();
		current_gr.next();
		
		var parent_prod_sys_id = FunUtil.getTableRecord('sc_cat_item', 'name', parent_product_code, false,'sys_id');
		var ll_io_a = new GlideRecord('u_ll_input_output_alignment');
		ll_io_a.addQuery('u_parent_product',parent_prod_sys_id);
		ll_io_a.query();
		
		while(ll_io_a.next()){
			var curr_ip_var = ll_io_a.u_input_variable;
			var par_ip_var  = ll_io_a.u_parent_product_field;
			
			//current_gr.variables[curr_ip_var]= parent_gr.variables[par_ip_var];
			
			if(JSUtil.notNil(parent_gr.variables[par_ip_var]))
				cart1.updateRitmVariable(current_gr.sys_id, curr_ip_var,parent_gr.variables[par_ip_var]);
			
		}
		
		//current_gr.update();
	}
	
};


/** update field in table
 **  pass tableName for which records need to be updated
 **  pass uniqueFieldName for table for exact record matching
 **  pass uniqueFieldValue for table for exact record matching
 ** fieldName-fieldValue to be updated in table

 */
FunUtil.updateFieldInTable  = function(tableName, uniqueFieldName, uniqueFieldValue,fieldName, fieldValue){
	gs.info('FunUtil tableName = '+tableName + ' uniqueFieldName = '+uniqueFieldName + ' uniqueFieldValue='+uniqueFieldValue  +' fieldName = '+fieldName+ ' fieldValue = '+fieldValue );
	var gr = new GlideRecord(tableName);
	gr.addQuery(uniqueFieldName,uniqueFieldValue);
	gr.query();
	
	if(gr.next()){
		gr.setValue(fieldName,fieldValue);
	}
	gr.update();
	
};


/**
 ** Populate variable values where same value needs to be updated in another variable in same ritm
 ** var1, var1_value will be used to populate var2
 ** create json_data entries if requires such scenarios, make sure  cat_item var_1 var_2 are valid values
 **/
FunUtil.setDuplicateVariableValue=function(ritmNumberOrSysID){
	
	
	
	
	var json_data = [
	{
		"cat_item":"Local-Loop",
		"var_1":"Contract_Term",
		"var_2":"Supplier_Contract_Term"
	}
	];
	
	
	var gr = new GlideRecord('sc_req_item');
	gr.get(ritmNumberOrSysID); // Pass unique identifier either sys_id or number of record
	gr.query();
	if(gr.next()){
		
		var ritm_vars = gr.variables;
		
		var prod_code = gr.cat_item.name;
		
		var cart1= new Cart1();
		
		for( var i in json_data ){
			if(json_data[i].cat_item == prod_code ){
				
				var var1=json_data[i].var_1;
				var var2=json_data[i].var_2;
				
				if(JSUtil.notNil(ritm_vars[var1]))
					cart1.updateRitmVariable(gr.sys_id, var2,ritm_vars[var1]);
			}
		}
		
		
	}
	
	
};




/**
 * Returns a map (Object) that is the union of all the given maps.
 */
FunUtil.union = function(maps) {
	var result = {};
		for (var i = 0; i < arguments.length; i++) {
			var map = arguments[i];
			for (var name in map)
				result[name] = map[name];
		}
		return result;
	};
	
	/**
 	* Removes entries from the given map.  The second argument defines what will be removed.  If it
 	* is an array, it is treated as an array of names to remove.  If it is an object, the names of
 	* its properties are the names to remove.  Otherwise, it is coerced to a string as the name of
 	* the single item to remove.
 	*/
	FunUtil.removeFromMap = function(map, names) {
		var nms;
		if (names instanceof Array)
			nms = names;
		else if (names instanceof Object) {
			nms = [];
			for (var name in names)
				nms.push(name);
		}
		else
			nms = ['' + names];
		
		for (var i = 0; i < nms.length; i++) {
			if (nms[i] in map)
				delete map[nms[i]];
		}
	};
	
	/*
 	*  Returns true if item is defined but has no properties or functions. (handy for associative arrays)
 	*/
	FunUtil.isEmpty = function(item) {
		var result=false;
		if (FunUtil.notNil(item)) {
			result=true;
			for (var i in item) {
				result=false;
				break;
			}
		}
		return result;
	};
	
	
	/*
 	* Returns true if the given item is not null and is not undefined.
 	*/
	FunUtil.has = function(item) {
		return (item != null) && (typeof item != 'undefined');
	};
	
	/*
 	* Returns true if the given item is null or is undefined (the logical inverse of .has(), above).
 	*/
	FunUtil.doesNotHave = function(item) {
		return !FunUtil.has(item);
	};
	
	/*
 	* Returns true if the given item is null, undefined, or evaluates to the empty string.
 	*/
	FunUtil.nil = function(item) {
		if (FunUtil.isJavaObject(item))
			return GlideFunUtil.isNilJavaObject(item);
		
		return (item == null) || (typeof item == 'undefined') || ('' == '' + item);
	};
	
	/*
 	* Returns true if the given item exists and is not empty (the logical inverse of .nil(), above).
 	*/
	FunUtil.notNil = function(item) {
		return !FunUtil.nil(item);
	};
	
	/*
 	* Returns the Rhino global object.
 	*/
	FunUtil.getGlobal = function(){
		return (function(){
			return this;
		}).call(null);
	};
	
	/*
 	* Returns true if the given item is a member of the given class.  For JavaScript objects, this method behaves exactly
 	* like the JavaScript operator "instanceof".  However, this method (unlike the JavaScript operator) also tests Java
 	* objects.
 	*
 	* item: the object to be tested.
 	* klass: the class to be tested (for Java objects, must be the complete class name, like "java.util.ArrayList").
 	*/
	FunUtil.instance_of = function(item, klass) {
		
		if (FunUtil._isString(klass)) {
			item = GlideRhinoHelper.getNativeFromRhino(item);
			if (FunUtil.isJavaObject(item))
				return GlideFunUtil.isInstanceOf(item, klass);
			
			return false;
		}
		
		return item instanceof klass;
	};
	
	FunUtil._isString = function(val) {
		return (typeof val == 'string' || val instanceof String);
	};
	
	/*
 	* Returns the type of the given value as a string, as follows:
 	*   'null'     if the given value is null or undefined
 	*   'string'   if the given value is a primitive string or a String wrapper instance
 	*   'number'   if the given value is a primitive number or a Number wrapper instance
 	*   'boolean'  if the given value is a primitive boolean or a Boolean wrapper instance
 	*   'function' if the given value is a function
 	*   'object'   otherwise (including if it is a Java object)
 	*
 	* See also: typeOf() which returns these or for Objects implented with 'type:' (such as
 	*           Script Includes that use our default boilerplate), this returns that type
 	*           which is intended to be the Javascript 'className' of the object.
 	*/
	FunUtil.type_of = function(value) {
		if (value == null)
			return 'null';
		
		if (FunUtil.isJavaObject(value))
			return 'object';
		
		var t = typeof value;
		if ((t == 'string') || (t == 'number') || (t == 'boolean') || (t == 'function'))
			return t;
		
		if ((value instanceof String) || ('' + value.constructor).match(/^function String\(\)/))
			return 'string';
		
		if (value instanceof Number)
			return 'number';
		
		if (value instanceof Boolean)
			return 'boolean';
		
		return 'object';
	};
	
	
	/**
 	* Returns the type of the given value.
 	*
 	* If 'x' is JavaObject, then this is the class name,
 	*
 	* If 'x' is a JavaScript object from a JS Class (like our Script Include boilerplate)
 	* then this is the value of the 'type' property which is meant to be the JavaScript
 	* class name,
 	*
 	* If 'x' is a JavaScript Array, then this returns 'array',
 	*
 	* If 'x' is a JavaScript Date, this returns 'date'
 	*
 	* Otherwise this returns the JavaScript type: string, number, boolean or object as per
 	* the type_of method (above).
 	*
 	* See Also: type_of
 	*/
	FunUtil.typeOf = function(x) {
		if (typeof x === 'undefined')
			return 'undefined';
		
		if (x instanceof Array)
			return "array";
		
		if (x instanceof Date)
			return "date";
		
		var t = FunUtil.type_of(x);
		
		if (t === 'object' && !FunUtil.isJavaObject(x) && typeof(x.type) === 'string')
			return x.type;
		
		return t;
	}
	
	
	/*
 	* Returns true if the given value is an instance of a Java object.
 	*/
	FunUtil.isJavaObject = function(value) {
		if (value == null)
			return false;
		
		if (value instanceof Packages.java.lang.Object)
			return true;
		
		return SNC.FunUtil.isJavaObject(value);
	};
	
	/*
 	* Coerces the given item to a boolean.  If the given item is a boolean, it is passed through.  Non-zero numbers return true.  Null or
 	* undefined returns false.  Strings return true only if exactly equal to 'true'.
 	*/
	FunUtil.toBoolean = function(item) {
		if (!FunUtil.has(item))
			return false;
		
		if (typeof item == 'boolean')
			return item;
		
		if (typeof item == 'number')
			return item != 0;
		
		if ((typeof item == 'string') || ((typeof item == 'object') && (item instanceof String)))
			return item == 'true';
		
		// if we get here then we've got either a non-String object or a function; always return true for these...
		return true;
	};
	
	/*
 	* Returns the value in a boolean GlideRecord field.
 	*/
	FunUtil.getBooleanValue = function(gr, field) {
		var val = gr.getValue(field);
		return (val == 'true') || (val == '1');
	};
	
	/**
 	* Determines whether a value exists within an object or not.
 	* @param {} container The haystack to search within.
 		* @param {} value The expected needle value to compare against.
 			* @param boolean|undefined compareByIdentity If true, uses === for comparison; == otherwise.
 			* @return True if value exists in container, False otherwise.
 			*/
			FunUtil.contains = function(container, value, compareByIdentity) {
				if (compareByIdentity) {
					// identity
					for (var key in container) {
						if (container[key] === value)
							return true;
					}
				} else {
					// equality
					for (var key in container) {
						if (container[key] == value)
							return true;
					}
				}
				
				return false;
			};
			
			/*
 			* Returns true if the two given values are equivalent, and optionally logs any differences.  The two
 			* values may be any value - JavaScript primitives or objects.  Objects of classes Object, Array, Date,
 			* String, Boolean, and Number are all compared correctly and (as necessary) recursively.  Note that
 			* comparand types much match exactly - for the purposes of this comparison, 'abc' does NOT match
 			* new String('abc').  If differences are logged, they may be retrieved from FunUtil.areEqualLog.
 			*/
			FunUtil.areEqualLog = '';
			FunUtil.areEqual = function(val1, val2, logDiff) {
				FunUtil.areEqualLog = '';
				if (typeof val1 != typeof val2) {
					log('Different type: ' + val1 + ' (' + typeof val1 + ') and ' + val2 + ' (' + typeof val2 + ')');
					return false;
				}
				
				// if we have two undefineds, we're good...
				if (typeof val1 == 'undefined')
					return true;
				
				// handle the awkward case of null...
				if ((val1 === null) || (val2 === null)) {
					if (val1 === val2)
						return true;
					
					log('Null and ' + ((val1 === null) ? typeof val2 : typeof val1));
					return false;
				}
				
				// if we've got a primitive type, directly compare...
				if (!(val1 instanceof Object)) {
					if (val1 === val2)
						return true;
					
					log('Different primitive ' + typeof val1 + ' values: ' + val1 + ' and ' + val2);
					return false;
				}
				
				// make sure we've got a object types here...
				if (typeof val1 != 'object') {
					log('Unexpected type: ' + typeof val1);
					return false;
				}
				
				// handle any Java objects passed in...
				if (isJavaObject(val1) || isJavaObject(val2)) {
					if (isJavaObjectVal1() && isJavaObject(val2)) {
						if (val1.equals(val2))
							return true;
						
						log('Different Java objects');
					}
					log('Java object and JavaScript object');
					return false;
				}
				
				// make sure we've got two JavaScript objects of the same type...
				var vc1 = val1.constructor.name;
				var vc2 = val2.constructor.name;
				if (vc1 != vc2) {
					log('Different JavaScript object types: ' + val1.constructor.name + ' and ' + val2.constructor.name);
					return false;
				}
				
				// handle case of two JavaScript objects in the same class that return primitives for valueOf()...
				if ((vc1 == 'Boolean') || (vc1 == 'Date') || (vc1 == 'Number') || (vc1 == 'String')) {
					if (val1.valueOf() == val2.valueOf())
						return true;
					
					log('Different ' + vc1 + ' primitive wrapper values: ' + val1.valueOf() + ' and ' + val2.valueOf());
					return false;
				}
				
				// if we've got two arrays, compare recursively element by element...
				if (val1.constructor.name == 'Array') {
					// we'd better be the same size!
					if (val1.length != val2.length) {
						log('Different array lengths: ' + val1.length + ' and ' + val2.length);
						return false;
					}
					
					// compare all our elements, in order...
					for (var i = 0; i < val1.length; i++) {
						if (FunUtil.areEqual(val1[i], val2[i], logDiff))
							continue;
						
						log('Different array element values: ' + val1[i] + ' and ' + val2[i]);
						return false;
					}
					return true;
				}
				
				// if we've got two objects, compare elements recursively and check for leftovers...
				if (val1.constructor.name == 'Object') {
					// collect all the property names in val2...
					var vp2 = {};
						for (var vn2 in val2)
							vp2[vn2] = true;
						
						// see if we have exactly the same properties in val1...
						for (var vn1 in val1) {
							if (vp2[vn1]) {
								delete vp2[vn1];
								continue;
							}
							
							log('Different properties');
							return false;
						}
						for (var vn2 in vp2) {
							log('Different properties');
							return false;
						}
						
						// ok, we have the same properties - but do they have the same values?
						for (var vn1 in val1) {
							if (FunUtil.areEqual(val1[vn1], val2[vn1], logDiff))
								continue;
							
							log('Properties have different values');
							return false;
						}
						return true;
					}
					
					// if we get here, then we've got two objects of unknown object types...
					log('Unknown object type: ' + val1.constructor.name);
					return false;
					
					function log(msg) {
						if (!logDiff)
							return;
						
						FunUtil.areEqualLog += msg;
						FunUtil.areEqualLog += '\n';
					}
				};
				
				/*
 				* Logs all the properties (recursively) in the given object: name, type, and value.  The optional second parameter is a name for the logged object.
 				*/
				FunUtil.logObject = function(obj, name) {
					gs.info(FunUtil.describeObject(obj, name));
				};
				
				/*
 				* Returns a string that recursively describes all the properties in the given object: name, type, and value.
 				* The optional second parameter is a name for the logged object.
 				*/
				FunUtil.describeObject = function(obj, name) {
					var result = [];
					result.push('Log Object' + ((name) ? ': ' + name : ''));
					if ((typeof(obj) != 'object' && typeof(obj) != 'string') || obj == null)
						result.push('  null, undefined, or not an object: ' + typeof(obj) );
					else
						FunUtil._describeObject(obj, null, '  ', 0, result);
					return result.join('\n');
				};
				
				/*
 				* Internal recursive object description string builder.
 				*/
				FunUtil._describeObject = function(obj, name, lead, level, result) {
					if (level > 25) {
						result.push(lead + '<<< exceeded 25 recursion levels, ignoring any deeper levels >>>');
						return;
					}
					
					var ns = (name == null) ? '' : name + ': ';
					var value = obj;
					var type = FunUtil.type_of(value);
					if (type == 'function') {
						result.push(lead + ns + type);
						return;
					}
					else if (type != 'object') {
						result.push(lead + ns + type + ' = ' + value);
						return;
					}
					
					if (value instanceof Array) {
						result.push(lead + ns + 'Array of ' + value.length + ' elements');
						for (var i = 0; i < value.length; i++)
							FunUtil._describeObject(value[i], '[' + i + ']', lead + '  ', level + 1, result);
					}
					else {
						if (FunUtil.isJavaObject(obj)) {
							var klassName = GlideFunUtil.getJavaClassName(obj);
							result.push(lead + ns + 'Java Object: ' + klassName + ' = ' + obj);
						}
						else if (obj instanceof GlideRecord) {
							var rec = (!gs.nil(obj.getDisplayValue())) ? '@ ' + obj.getDisplayValue() : '';
							result.push(lead + ns + 'GlideRecord(\'' + obj.getTableName() + '\') ' + rec);
						}
						else {
							if (typeof obj.explainLock == 'function') {  // is this a GlideElement of some kind?
								var nm = obj.getName();
								var vl = obj.getDisplayValue();
								result.push(lead + ns + 'GlideElement (or child class): ' + nm + ' = ' + vl);
							} else
							result.push(lead + ns + 'Object');
							for (var nmo in obj)
								FunUtil._describeObject(obj[nmo], nmo, '  ' + lead, level + 1, result);
						}
					}
				};
				
				/*
 				* NOTE: between this banner and the following banner, several string literals are specified in an odd way: by the contatenation of a single
 				*       character ('&') and the remainder of the HTML entity (such as 'amp;').  This method was employed to avoid having the entities translated
 				*       into the equivalent characters when the script include is edited in the instance.
 				*/
				FunUtil.AMP     = /\&/g;
				FunUtil.GT      = /\>/g;
				FunUtil.LT      = /\</g;
				FunUtil.QT      = /\"/g;
				FunUtil.AMP_ENT = new RegExp( '\\&' + 'amp;',  'g' );
				FunUtil.GT_ENT  = new RegExp( '\\&' + 'gt;',   'g' );
				FunUtil.LT_ENT  = new RegExp( '\\&' + 'lt;',   'g' );
				FunUtil.QT_ENT  = new RegExp( '\\&' + 'quot;', 'g' );
				
				FunUtil.escapeText = function(text) {
					
					var ampRegex = new SNC.Regex('/&/');
					var ltRegex = new SNC.Regex('/</');
					var gtRegex = new SNC.Regex('/>/');
					
					var result = ampRegex.replaceAll('' + text, '&' + 'amp;');
					result = ltRegex.replaceAll(result, '&' + 'lt;');
					return gtRegex.replaceAll(result, '&' + 'gt;');
					
				};
				
				FunUtil.unescapeText = function(text) {
					
					var ampRegex = new SNC.Regex('/&' + 'amp;/');
					var ltRegex = new SNC.Regex('/&' + 'lt;/');
					var gtRegex = new SNC.Regex('/&' + 'gt;/');
					
					var result = ampRegex.replaceAll('' + text, '&');
					result = ltRegex.replaceAll(result, '<');
					return gtRegex.replaceAll(result, '>');
					
				};
				
				FunUtil.escapeAttr = function(attr) {
					var result = ('' + attr).replace(FunUtil.AMP, '&' + 'amp;');
					return result.replace(FunUtil.QT, '&' + 'quot;');
				};
				
				FunUtil.unescapeAttr = function(attr) {
					var result = ('' + attr).replace(FunUtil.QT_ENT, '"');
					return result.replace(FunUtil.AMP_ENT, '&');
				};
				
				
				/** Render an expanded/evaluted string from a string that may contain one
 				*  or more Javascript expressions, each wrapped in a dolloar-braces
 				*  delimiter pattern.
 				*
 				*     'The timeis:${newGlideDateTime()}'
 					*
 					*  will displaythecurrenttime.
 					*
 					*  When used in specific contexts, such as inside a workflow context
 					*  certain global variables might be usable such as 'current' or 'workflow':
 					*
 					*      'WF State:${context.state},rec:${current.sys_id}'
 						*
 						*  and content can be substituted into data from various Javascripts:
 						*
 						*      <CREATED>${newGlideDateTime()}</CREATED>
 							*
 							*  WARNING: This is used heavily by workflows.  If this is changed, then
 							*           be sure to run all workflow tests. Test Log Message activity
 							*           with ${workflow.variables.somevariable} and similar usages.
 								*/
								FunUtil.strEval = function(str) {
									var s = new String(str);
									
									// if the entire string is within a ${} return the eval of it
										// to allow getting an object back from this method
										//
										if (s.startsWith("${") && s.endsWith("}") && (s.indexOf("${", 2) == -1))
											return eval(s.substring(2, s.length - 1));
											
											// also replace anything with ${something} to eval(something)
												//
												s = s.replace( /\$\{\s*(.*?)\s*\}/g, function(str, p1) {
													return (eval(p1) || "")
												});
												if (s.indexOf('javascript:') == 0)
													s = eval(s.substring(11));
												return s;
											};
											
											/*
 											* End of odd string construction...
 											*/
											
											FunUtil.prototype = {
												type: "FunUtil"
											};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-08-19 06:19:26</sys_created_on>
        <sys_id>994d79414f0c2300d1974fe18110c769</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>FunUtil</sys_name>
        <sys_package display_value="IPLookup" source="x_37610_iplookup">84c949454f882300d1974fe18110c7f7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IPLookup">84c949454f882300d1974fe18110c7f7</sys_scope>
        <sys_update_name>sys_script_include_994d79414f0c2300d1974fe18110c769</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-08-19 06:22:05</sys_updated_on>
    </sys_script_include>
</record_update>
